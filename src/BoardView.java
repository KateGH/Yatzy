import javax.swing.*;import java.awt.*;import java.awt.event.*;import java.util.ArrayList;import java.io.*;import java.util.Collections;public class BoardView extends JFrame implements ActionListener{    JPanel mainPanel;    JPanel statusPanel;    JPanel topPanel;    JPanel bottomPanel;    JButton resetButton;    JButton ruleButton;    JButton quitButton;    JButton rollButton;    // object Dice    public Dice dice1, dice2, dice3, dice4, dice5;    // object DiceImage    public DiceImage diceImage1, diceImage2, diceImage3, diceImage4, diceImage5;    // Dice in hand    public ArrayList <Dice> myDice = new ArrayList<>();    GridBagConstraints constraints;    JButton button101 = new JButton();    JButton button102 = new JButton();    JButton button103 = new JButton();    JButton button104 = new JButton();    JButton button105 = new JButton();    JButton button106 = new JButton();    JButton button107 = new JButton();    JButton button108 = new JButton();    JButton button109 = new JButton();    JButton button110 = new JButton();    JButton button111 = new JButton();    JButton button112 = new JButton();    JButton button113 = new JButton();    JButton button114 = new JButton();    JButton button115 = new JButton();    JButton button116 = new JButton();    JButton button117 = new JButton();    JButton button118 = new JButton();    public JButton [] buttons = {button101, button102, button103, button104, button105, button106, button107, button108,button109, button110, button111, button112, button113, button114, button115, button116, button117, button118};    JButton button201 = new JButton();    JButton button202 = new JButton();    JButton button203 = new JButton();    JButton button204 = new JButton();    JButton button205 = new JButton();    JButton button206 = new JButton();    JButton button207 = new JButton();    JButton button208 = new JButton();    JButton button209 = new JButton();    JButton button210 = new JButton();    JButton button211 = new JButton();    JButton button212 = new JButton();    JButton button213 = new JButton();    JButton button214 = new JButton();    JButton button215 = new JButton();    JButton button216 = new JButton();    JButton button217 = new JButton();    JButton button218 = new JButton();    public Player currentPlayer;    public Player p1;    public Player p2;    int sc1, sc2, sc3, sc4, sc5, sc6, sc7, sc8, sc9, sc10, sc11, sc12, sc13, sc14, sc15, sc16, sc17, sc18;//    int [] scores = new int [17];    int [] scores = {sc1, sc2, sc3, sc4, sc5, sc6, sc7, sc8, sc9, sc10, sc11, sc12, sc13, sc14, sc15, sc16, sc17, sc18};    int scf1, scf2, scf3, scf4, scf5, scf6, scf7, scf8, scf9, scf10, scf11, scf12, scf13, scf14, scf15, scf16, scf17, scf18;//    int [] scoresFinal = new int [17];    int [] scoresFinal = {scf1, scf2, scf3, scf4, scf5, scf6, scf7, scf8, scf9, scf10, scf11, scf12, scf13, scf14, scf15, scf16, scf17, scf18};//    ArrayList <Integer> scoresFinal = new ArrayList<>();    // constructor#01    public BoardView(){        super();        createAndShowGUI();//        boolean hasTotalScore = false;//        do{//            System.out.println("Welcome to Yatzy Game!");//            System.out.println("Please enter the first player's name");//            System.out.println("Please enter the second player's name");//            System.out.println();//////        }while(!hasTotalScore);    }    // method    public void createAndShowGUI(){        mainPanel = new JPanel(new BorderLayout());        statusPanel = new JPanel();        topPanel = new JPanel();        bottomPanel = new JPanel();        // A) statusLabel        resetButton = new JButton("Reset");        ruleButton = new JButton("Rules");        quitButton = new JButton("Quit");        statusPanel.add(resetButton);        statusPanel.add(ruleButton);        statusPanel.add(quitButton);        statusPanel.setLayout(new FlowLayout());        statusPanel.setBackground(Color.cyan);        mainPanel.add(statusPanel, BorderLayout.NORTH);        //JButton needs ActionListener        resetButton.addActionListener(this);        ruleButton.addActionListener(this);        quitButton.addActionListener(this);        // Object Dice        dice1 = new Dice();        dice2 = new Dice();        dice3 = new Dice();        dice4 = new Dice();        dice5 = new Dice();        // ArrayList        myDice.add(dice1);        myDice.add(dice2);        myDice.add(dice3);        myDice.add(dice4);        myDice.add(dice5);        // Object DiceImage(JButton, Object)        diceImage1 = new DiceImage(new JButton(), dice1);        diceImage2 = new DiceImage(new JButton(), dice2);        diceImage3 = new DiceImage(new JButton(), dice3);        diceImage4 = new DiceImage(new JButton(), dice4);        diceImage5 = new DiceImage(new JButton(), dice5);        diceImage1.setIcon(new ImageIcon("/Users/Apple/IdeaProjects/SpelProjekt/Yatzy/ByKate/Yatzy_byKate2/src/face0" + dice1.getValue() + ".png"));        diceImage2.setIcon(new ImageIcon("/Users/Apple/IdeaProjects/SpelProjekt/Yatzy/ByKate/Yatzy_byKate2/src/face0" + dice2.getValue() + ".png"));        diceImage3.setIcon(new ImageIcon("/Users/Apple/IdeaProjects/SpelProjekt/Yatzy/ByKate/Yatzy_byKate2/src/face0" + dice3.getValue() + ".png"));        diceImage4.setIcon(new ImageIcon("/Users/Apple/IdeaProjects/SpelProjekt/Yatzy/ByKate/Yatzy_byKate2/src/face0" + dice4.getValue() + ".png"));        diceImage5.setIcon(new ImageIcon("/Users/Apple/IdeaProjects/SpelProjekt/Yatzy/ByKate/Yatzy_byKate2/src/face0" + dice5.getValue() + ".png"));        diceImage1.setOpaque(true);        diceImage2.setOpaque(true);        diceImage3.setOpaque(true);        diceImage4.setOpaque(true);        diceImage5.setOpaque(true);        //JButton needs ActionListener        InnerListener myInnerListener = new InnerListener();        diceImage1.addActionListener(myInnerListener);        diceImage2.addActionListener(myInnerListener);        diceImage3.addActionListener(myInnerListener);        diceImage4.addActionListener(myInnerListener);        diceImage5.addActionListener(myInnerListener);        dice1.addObserver(diceImage1);        dice2.addObserver(diceImage2);        dice3.addObserver(diceImage3);        dice4.addObserver(diceImage4);        dice5.addObserver(diceImage5);        rollButton = new JButton("Roll dice!");        rollButton.addActionListener(this);        //JButton needs ActionListener        topPanel.add(diceImage1);        topPanel.add(diceImage2);        topPanel.add(diceImage3);        topPanel.add(diceImage4);        topPanel.add(diceImage5);        topPanel.add(rollButton);        // B) topLabel        topPanel.setLayout(new FlowLayout());        topPanel.setBackground(Color.white);        topPanel.setSize(600, 150);        mainPanel.add(topPanel, BorderLayout.CENTER);        // C) bottomLabel        constraints = new GridBagConstraints();        bottomPanel.setLayout(new GridBagLayout());        mainPanel.add(bottomPanel, BorderLayout.SOUTH);        // first column        addComponent(bottomPanel, new JLabel("YatZy") , 0, 0, 1, 1, GridBagConstraints.HORIZONTAL, GridBagConstraints.CENTER);        addComponent(bottomPanel, new JLabel("Upper Section") , 0, 1, 1, 1, GridBagConstraints.HORIZONTAL, GridBagConstraints.CENTER);        addComponent(bottomPanel, new JLabel("Aces") , 0, 2, 1, 1, GridBagConstraints.HORIZONTAL, GridBagConstraints.CENTER);        addComponent(bottomPanel, new JLabel("Twoes") , 0, 3, 1, 1, GridBagConstraints.HORIZONTAL, GridBagConstraints.CENTER);        addComponent(bottomPanel, new JLabel("Threes") , 0, 4, 1, 1, GridBagConstraints.HORIZONTAL, GridBagConstraints.CENTER);        addComponent(bottomPanel, new JLabel("Fours") , 0, 5, 1, 1, GridBagConstraints.HORIZONTAL, GridBagConstraints.CENTER);        addComponent(bottomPanel, new JLabel("Fives") , 0, 6, 1, 1, GridBagConstraints.HORIZONTAL, GridBagConstraints.CENTER);        addComponent(bottomPanel, new JLabel("Sixes") , 0, 7, 1, 1, GridBagConstraints.HORIZONTAL, GridBagConstraints.CENTER);        addComponent(bottomPanel, new JLabel("Sum") , 0, 8, 1, 1, GridBagConstraints.HORIZONTAL, GridBagConstraints.CENTER);        addComponent(bottomPanel, new JLabel("Bonus") , 0, 9, 3, 1, GridBagConstraints.HORIZONTAL, GridBagConstraints.CENTER);        addComponent(bottomPanel, new JLabel("Lower Section") , 0, 10, 1, 1, GridBagConstraints.HORIZONTAL, GridBagConstraints.CENTER);        addComponent(bottomPanel, new JLabel("One pair") , 0, 11, 1, 1, GridBagConstraints.HORIZONTAL, GridBagConstraints.CENTER);        addComponent(bottomPanel, new JLabel("Two pair") , 0, 12, 1, 1, GridBagConstraints.HORIZONTAL, GridBagConstraints.CENTER);        addComponent(bottomPanel, new JLabel("Three of kind") , 0, 13, 1, 1, GridBagConstraints.HORIZONTAL, GridBagConstraints.CENTER);        addComponent(bottomPanel, new JLabel("Four of kind") , 0, 14, 1, 1, GridBagConstraints.HORIZONTAL, GridBagConstraints.CENTER);        addComponent(bottomPanel, new JLabel("Small Straight") , 0, 15, 1, 1, GridBagConstraints.HORIZONTAL, GridBagConstraints.CENTER);        addComponent(bottomPanel, new JLabel("Large Straight") , 0, 16, 1, 1, GridBagConstraints.HORIZONTAL, GridBagConstraints.CENTER);        addComponent(bottomPanel, new JLabel("Full house") , 0, 17, 1, 1, GridBagConstraints.HORIZONTAL, GridBagConstraints.CENTER);        addComponent(bottomPanel, new JLabel("Chance") , 0, 18, 1, 1, GridBagConstraints.HORIZONTAL, GridBagConstraints.CENTER);        addComponent(bottomPanel, new JLabel("YATZY") , 0, 19, 1, 1, GridBagConstraints.HORIZONTAL, GridBagConstraints.CENTER);        addComponent(bottomPanel, new JLabel("Total score") , 0, 20, 1, 1, GridBagConstraints.HORIZONTAL, GridBagConstraints.CENTER);        // player01        addComponent(bottomPanel, new JLabel("Player01") , 1, 0, 2, 1, GridBagConstraints.HORIZONTAL, GridBagConstraints.CENTER);        addComponent(bottomPanel, button101, 1, 2, 2, 1, GridBagConstraints.HORIZONTAL, GridBagConstraints.CENTER);        addComponent(bottomPanel, button102, 1, 3, 2, 1, GridBagConstraints.HORIZONTAL, GridBagConstraints.CENTER);        addComponent(bottomPanel, button103, 1, 4, 2, 1, GridBagConstraints.HORIZONTAL, GridBagConstraints.CENTER);        addComponent(bottomPanel, button104, 1, 5, 2, 1, GridBagConstraints.HORIZONTAL, GridBagConstraints.CENTER);        addComponent(bottomPanel, button105, 1, 6, 2, 1, GridBagConstraints.HORIZONTAL, GridBagConstraints.CENTER);        addComponent(bottomPanel, button106, 1, 7, 2, 1, GridBagConstraints.HORIZONTAL, GridBagConstraints.CENTER);        addComponent(bottomPanel, button107, 1, 8, 2, 1, GridBagConstraints.HORIZONTAL, GridBagConstraints.CENTER);        addComponent(bottomPanel, button108, 1, 9, 2, 1, GridBagConstraints.HORIZONTAL, GridBagConstraints.CENTER);        addComponent(bottomPanel, button109, 1, 11, 2, 1, GridBagConstraints.HORIZONTAL, GridBagConstraints.CENTER);        addComponent(bottomPanel, button110, 1, 12, 2, 1, GridBagConstraints.HORIZONTAL, GridBagConstraints.CENTER);        addComponent(bottomPanel, button111, 1, 13, 2, 1, GridBagConstraints.HORIZONTAL, GridBagConstraints.CENTER);        addComponent(bottomPanel, button112, 1, 14, 2, 1, GridBagConstraints.HORIZONTAL, GridBagConstraints.CENTER);        addComponent(bottomPanel, button113, 1, 15, 2, 1, GridBagConstraints.HORIZONTAL, GridBagConstraints.CENTER);        addComponent(bottomPanel, button114, 1, 16, 2, 1, GridBagConstraints.HORIZONTAL, GridBagConstraints.CENTER);        addComponent(bottomPanel, button115, 1, 17, 2, 1, GridBagConstraints.HORIZONTAL, GridBagConstraints.CENTER);        addComponent(bottomPanel, button116, 1, 18, 2, 1, GridBagConstraints.HORIZONTAL, GridBagConstraints.CENTER);        addComponent(bottomPanel, button117, 1, 19, 2, 1, GridBagConstraints.HORIZONTAL, GridBagConstraints.CENTER);        addComponent(bottomPanel, button118, 1, 20, 2, 1, GridBagConstraints.HORIZONTAL, GridBagConstraints.CENTER);        //JButton needs ActionListener        ScoreListenerIn scoreListener = new ScoreListenerIn();        for(int i=0;i<buttons.length;i++){            buttons[i].addActionListener(scoreListener);        }        for(int i=0;i<buttons.length;i++){            buttons[i].setOpaque(true);        }        // player02        addComponent(bottomPanel, new JLabel("Player02") , 3, 0, 2, 1, GridBagConstraints.HORIZONTAL, GridBagConstraints.CENTER);        addComponent(bottomPanel, button201, 3, 2, 2, 1, GridBagConstraints.HORIZONTAL, GridBagConstraints.CENTER);        addComponent(bottomPanel, button202, 3, 3, 2, 1, GridBagConstraints.HORIZONTAL, GridBagConstraints.CENTER);        addComponent(bottomPanel, button203, 3, 4, 2, 1, GridBagConstraints.HORIZONTAL, GridBagConstraints.CENTER);        addComponent(bottomPanel, button204, 3, 5, 2, 1, GridBagConstraints.HORIZONTAL, GridBagConstraints.CENTER);        addComponent(bottomPanel, button205, 3, 6, 2, 1, GridBagConstraints.HORIZONTAL, GridBagConstraints.CENTER);        addComponent(bottomPanel, button206, 3, 7, 2, 1, GridBagConstraints.HORIZONTAL, GridBagConstraints.CENTER);        addComponent(bottomPanel, button207, 3, 8, 2, 1, GridBagConstraints.HORIZONTAL, GridBagConstraints.CENTER);        addComponent(bottomPanel, button208, 3, 9, 2, 1, GridBagConstraints.HORIZONTAL, GridBagConstraints.CENTER);        addComponent(bottomPanel, button209, 3, 11, 2, 1, GridBagConstraints.HORIZONTAL, GridBagConstraints.CENTER);        addComponent(bottomPanel, button210, 3, 12, 2, 1, GridBagConstraints.HORIZONTAL, GridBagConstraints.CENTER);        addComponent(bottomPanel, button211, 3, 13, 2, 1, GridBagConstraints.HORIZONTAL, GridBagConstraints.CENTER);        addComponent(bottomPanel, button212, 3, 14, 2, 1, GridBagConstraints.HORIZONTAL, GridBagConstraints.CENTER);        addComponent(bottomPanel, button213, 3, 15, 2, 1, GridBagConstraints.HORIZONTAL, GridBagConstraints.CENTER);        addComponent(bottomPanel, button214, 3, 16, 2, 1, GridBagConstraints.HORIZONTAL, GridBagConstraints.CENTER);        addComponent(bottomPanel, button215, 3, 17, 2, 1, GridBagConstraints.HORIZONTAL, GridBagConstraints.CENTER);        addComponent(bottomPanel, button216, 3, 18, 2, 1, GridBagConstraints.HORIZONTAL, GridBagConstraints.CENTER);        addComponent(bottomPanel, button217, 3, 19, 2, 1, GridBagConstraints.HORIZONTAL, GridBagConstraints.CENTER);        addComponent(bottomPanel, button218, 3, 20, 2, 1, GridBagConstraints.HORIZONTAL, GridBagConstraints.CENTER);        //JButton needs ActionListener        button201.addActionListener(scoreListener);        button202.addActionListener(scoreListener);        button203.addActionListener(scoreListener);        button204.addActionListener(scoreListener);        button205.addActionListener(scoreListener);        button206.addActionListener(scoreListener);        button207.addActionListener(scoreListener);        button208.addActionListener(scoreListener);        button209.addActionListener(scoreListener);        button210.addActionListener(scoreListener);        button211.addActionListener(scoreListener);        button212.addActionListener(scoreListener);        button213.addActionListener(scoreListener);        button214.addActionListener(scoreListener);        button215.addActionListener(scoreListener);        button216.addActionListener(scoreListener);        button217.addActionListener(scoreListener);        button218.addActionListener(scoreListener);        this.getContentPane().add(mainPanel);        pack();        setTitle("Welcome to YatZy");        setDefaultCloseOperation(EXIT_ON_CLOSE);        setSize(600, 720);        setLocationRelativeTo(null);        setVisible(true);    }    private void addComponent(JPanel bottomPanel, Component c, int x, int y, int width, int height, int fill, int a) {            constraints.gridx = x;            constraints.gridy = y;            constraints.gridwidth = width;            constraints.gridheight = height;            constraints.fill = fill;            constraints.anchor = a;            constraints.insets = new Insets(0, 0, 0, 0);            bottomPanel.add(c, constraints);    }    class InnerListener implements ActionListener{        Color tempColor;            // variable01        boolean hold;               // variable02        @Override        public void actionPerformed(ActionEvent e) {            /* actionPerformed() after click              1) change color back-forth              2) holdStatusif (source == boardView.gameButton[i])            */            System.out.println("\nInner ActionListener");            // ***try to get rid of if-sat to minimize code            Object source = e.getSource();            if(source instanceof DiceImage && ( (DiceImage)source).getHoldStatus()){                ((JButton) e.getSource()).setBackground(tempColor);                hold = false;                ((DiceImage)source).setHoldStatus(false);            }            else {                ((JButton) e.getSource()).setBackground(Color.cyan);                hold = true;                ((DiceImage)source).setHoldStatus(true);            }        }    }    @Override    public void actionPerformed(ActionEvent e) {        if (e.getSource() == resetButton) {            resetGame();        }        if (e.getSource() == ruleButton) {//            File ruleFile = new File ("/Users/Apple/IdeaProjects/Yatzy_byKate2/src/YatzyRule.txt");            JOptionPane.showMessageDialog(null, "Roll dice to get score of each type", "Yatzy Rules", JOptionPane.INFORMATION_MESSAGE);        }        if (e.getSource() == quitButton) {            System.exit(0);        }        if (e.getSource() == rollButton) {            int count = 0;            do {                JComponent theButton = (JComponent) e.getSource();                if (!dice1.isHold()) {                    dice1.roll();                }                if (!dice2.isHold()) {                    dice2.roll();                }                if (!dice3.isHold()) {                    dice3.roll();                }                if (!dice4.isHold()) {                    dice4.roll();                }                if (!dice5.isHold()) {                    dice5.roll();                }                count++;//                System.out.println("roll before: " + count);            }  while(count <3);//            System.out.println("roll after: " + count);            System.out.println();            System.out.println("outter actionPerformed");//            System.out.println("ArrayList myDice: " + myDice);//            Collections.sort(myDice);  // suggest to implement comparable??? how            calculateAndDisplayScores();        }    }    public void calculateAndDisplayScores(){        // to Calculate        sc1 = CheckScore.calculateSameValues(1, myDice);        sc2 = CheckScore.calculateSameValues(2, myDice);        sc3 = CheckScore.calculateSameValues(3, myDice);        sc4 = CheckScore.calculateSameValues(4, myDice);        sc5 = CheckScore.calculateSameValues(5, myDice);        sc6 = CheckScore.calculateSameValues(6, myDice);        if(scf1!=0 && scf2!=0 && scf3!=0 && scf4!=0 && scf5!=0 && scf6!=0){            sc7 = scf1 + scf2 + scf3 + scf4 + scf5 + scf6;        }else{            sc7 = 0;        }        scf7 = sc7;        sc8 = (scf7 >=63)? 50 : 0;        scf8 = sc8;        sc9 = CheckScore.calculateOnePair(myDice);        sc10 = CheckScore.calculateTwoPairs(myDice);        sc11 = CheckScore.calculateThreeOfAKind(myDice);        sc12 = CheckScore.calculateFourOfAKind(myDice);        sc13 = CheckScore.calculateSmallStraight(myDice);        sc14 = CheckScore.calculateLargeStraight(myDice);        sc15 = CheckScore.calculateFullHouse(myDice);        sc16 = CheckScore.calculateChance(myDice);        sc17 = CheckScore.calculateYatzy(myDice);        if(scf7!=0 && scf8!=0 && scf9!=0 && scf10!=0 && scf11!=0 && scf12!=0 && scf13!=0 && scf14!=0 && scf15!=0 && scf16!=0 && scf17!=0){            sc18 = scf7 + scf8 + scf9 + scf10 + scf11 + scf12 + scf13 + scf14 + scf15 + scf16 + scf17;        }else{            sc18 = 0;        }        scf18 = sc18;        scores[0] = sc1;        scores[1] = sc2;        scores[2] = sc3;        scores[3] = sc4;        scores[4] = sc5;        scores[5] = sc6;        scores[6] = sc7;        scores[7] = sc8;        scores[8] = sc9;        scores[9] = sc10;        scores[10] = sc11;        scores[11] = sc12;        scores[12] = sc13;        scores[13] = sc14;        scores[14] = sc15;        scores[15] = sc16;        scores[16] = sc17;        scores[17] = sc18;        for(int eachScore: scores){            System.out.print(eachScore + ", ");        }//        scoresFinal[0] = scf1;//        scoresFinal[1] = scf2;//        scoresFinal[2] = scf3;//        scoresFinal[3] = scf4;//        scoresFinal[4] = scf5;//        scoresFinal[5] = scf6;//        scoresFinal[6] = scf7;//        scoresFinal[7] = scf8;//        scoresFinal[8] = scf9;//        scoresFinal[9] = scf10;//        scoresFinal[10] = scf11;//        scoresFinal[11] = scf12;//        scoresFinal[12] = scf13;//        scoresFinal[13] = scf14;//        scoresFinal[14] = scf15;//        scoresFinal[15] = scf16;//        scoresFinal[16] = scf17;//        scoresFinal[17] = scf18;//        System.out.println();//        for(int eachScoreFinal: scoresFinal){//            System.out.print(eachScoreFinal + ", ");//        }        // to Display        for(int i=0;i<18;i++){            if(scoresFinal[i]==0 && scores[i]!=0){                buttons[i].setText(String.valueOf(scores[i]));            }            else if(scoresFinal[i]!=0){                buttons[i].setText(String.valueOf(scoresFinal[i]));            }            else if (scoresFinal[i]==0 && scores[i]==0){                buttons[i].setText("");            }        }    }    public void resetGame(){        diceImage1.setIcon(new ImageIcon(DiceImage.class.getResource("face01.png")));        diceImage2.setIcon(new ImageIcon(DiceImage.class.getResource("face01.png")));        diceImage3.setIcon(new ImageIcon(DiceImage.class.getResource("face01.png")));        diceImage4.setIcon(new ImageIcon(DiceImage.class.getResource("face01.png")));        diceImage5.setIcon(new ImageIcon(DiceImage.class.getResource("face01.png")));        for(int i=0;i<buttons.length;i++){            buttons[i].setText(String.valueOf(""));        }        for(int i=0;i<buttons.length;i++){            buttons[i].setOpaque(false);        }    }    public void changeTurn() {        currentPlayer = (currentPlayer == p1) ? p2 : p1;    }    class ScoreListenerIn implements ActionListener {    /*        1. appearance - change color to gray        2. score - hold score to arrayList        3. withdraw from Actionlistener of score change     */        @Override        public void actionPerformed(ActionEvent e) {            System.out.println("\nscoreListener");            Object source = e.getSource();            if(source instanceof JButton){                ((JButton)e.getSource()).setBackground(Color.gray);                //clicked button to change sc[i] to scf[i]                String scoreStr = ((JButton) source).getText();                int scoreInt = Integer.parseInt(scoreStr);                System.out.println(scoreInt);                for(int theScore: scores){                    System.out.print(theScore + ", ");                }                if(e.getSource() == button101){                    scf1 = sc1;                    System.out.println("sc1: " + sc1);                    System.out.println("scf1: " + scf1);                }else if(e.getSource() == button102){                    scf2 = sc2;                }else if(e.getSource() == button103){                    scf3 = sc3;                }else if(e.getSource() == button104){                    scf4 = sc4;                }else if(e.getSource() == button105){                    scf5 = sc5;                }else if(e.getSource() == button106){                    scf6 = sc6;                }else if(e.getSource() == button109){                    scf9 = sc9;                }else if(e.getSource() == button110){                    scf10 = sc10;                }else if(e.getSource() == button111){                    scf11 = sc11;                }else if(e.getSource() == button112){                    scf12 = sc12;                }else if(e.getSource() == button113){                    scf13 = sc13;                }else if(e.getSource() == button114){                    scf14 = sc14;                }else if(e.getSource() == button115){                    scf15 = sc15;                }else if(e.getSource() == button116){                    scf16 = sc16;                }else if(e.getSource() == button117){                    scf17 = sc17;                }                scoresFinal[0] = scf1;                scoresFinal[1] = scf2;                scoresFinal[2] = scf3;                scoresFinal[3] = scf4;                scoresFinal[4] = scf5;                scoresFinal[5] = scf6;                scoresFinal[6] = scf7;                scoresFinal[7] = scf8;                scoresFinal[8] = scf9;                scoresFinal[9] = scf10;                scoresFinal[10] = scf11;                scoresFinal[11] = scf12;                scoresFinal[12] = scf13;                scoresFinal[13] = scf14;                scoresFinal[14] = scf15;                scoresFinal[15] = scf16;                scoresFinal[16] = scf17;                scoresFinal[17] = scf18;                System.out.println("\n");                for(int theScoreFinal: scoresFinal){                    System.out.print(theScoreFinal + ", ");                }                //?? how to code that "any int sc that is chosen will not listen to ActionListener any longer"            }        }    }}