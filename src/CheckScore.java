import javax.swing.*;import java.util.*;public class CheckScore extends JButton{    private int scores = 0;    public CheckScore(){    }    public CheckScore (JButton jButton){    }    public CheckScore(JButton jbutton, ArrayList <Dice> myDice){    }    // add up total score of 5 dice    public static int calculateSameValues(int value, ArrayList<Dice> myDice){        int sum = 0;        for(int i=0;i<5;i++){            if(myDice.get(i).getValue() == value){                sum +=value;            }        }        return sum;    }    public static int calculateOnePair(ArrayList<Dice> myDice){        int sum = 0;        for(int i=0;i<5;i++){            int firstValue = myDice.get(i).getValue();            int secondValue = myDice.get(i).getValue();            if(firstValue == secondValue){                sum = firstValue*2;            }        }        return sum;    }    public static int calculateTwoPairs(ArrayList<Dice>myDice){        int sum = 0;        for(int i=0;i<3;i++){            int firstValue = myDice.get(i).getValue();            int secondValue = myDice.get(i).getValue();            if(firstValue == secondValue){                for(int k=i+2;k<4;k++){                    int thirdValue = myDice.get(k).getValue();                    int fourthValue = myDice.get(k+1).getValue();                    if(secondValue != thirdValue && thirdValue == fourthValue){                        sum = firstValue + secondValue + thirdValue + fourthValue;                    }                }            }        }        return sum;    }    public static int calculateThreeOfAKind(ArrayList<Dice> myDice){        int sum = 0;        boolean threeOfAKind = false;        for(int i=1;i<=6;i++){            int count =0;            for(int j=0;j<5;j++){                if(myDice.get(j).getValue() == i)                    count++;                if(count>2)                    threeOfAKind = true;            }        }        if(threeOfAKind){            for(int k=0;k<5;k++){                sum += myDice.get(k).getValue();  // incorrect cal, coz cal only thoseThree not every            }        } else sum = 0;        return sum;    }    public static int calculateFourOfAKind(ArrayList<Dice> myDice){        int sum = 0;        boolean fourOfAKind = false;        for(int i=1;i<=6;i++){            int count =0;            for(int j=0;j<5;j++){                if(myDice.get(j).getValue() == i)                    count++;                if(count>3)                    fourOfAKind = true;            }        }        if(fourOfAKind){            for(int k=0;k<5;k++){                sum += myDice.get(k).getValue();            }        } else sum = 0;        return sum;    }    public static int calculateSmallStraight(ArrayList<Dice> myDice){        int sum = 0;        int [] i = new int[5];        i[0] = myDice.get(0).getValue();        i[1] = myDice.get(1).getValue();        i[2] = myDice.get(2).getValue();        i[3] = myDice.get(3).getValue();        i[4] = myDice.get(4).getValue();        Arrays.sort(i);        for(int j=0;j<4;j++){            int temp =0;            if(i[j] == i[j+1]){                temp = i[j];                for(int k=j;k<4;k++){                    i[k] = i[k+1];                }                i[4] = temp;            }        }        if( (   (i[0] == 1) && (i[1] == 2) && (i[2] == 3) && (i[3] == 4) )||                (       (i[0] == 2) && (i[1] == 3) && (i[2] == 4) && (i[3] == 5)  )||                (       (i[0] == 3) && (i[1] == 4) && (i[2] == 5) && (i[3] == 6)  )||                (       (i[0] == 1) && (i[1] == 2) && (i[2] == 3) && (i[3] == 4)  )||                (       (i[0] == 2) && (i[1] == 3) && (i[2] == 4) && (i[3] == 5)  )||                (       (i[0] == 3) && (i[1] == 4) && (i[2] == 5) && (i[3] == 6)  )                )        {            sum = 15;        }        return sum;    }    public static int calculateLargeStraight(ArrayList<Dice> myDice){        int sum = 0;        int [] i = new int[5];        i[0] = myDice.get(0).getValue();        i[1] = myDice.get(1).getValue();        i[2] = myDice.get(2).getValue();        i[3] = myDice.get(3).getValue();        i[4] = myDice.get(4).getValue();        Arrays.sort(i);        if( (   (i[0] == 1) &&                (i[1] == 2) &&                (i[2] == 3) &&                (i[3] == 4) &&                (i[4] == 5) ) ||                (       (i[0] == 2) &&                        (i[1] == 3) &&                        (i[2] == 4) &&                        (i[3] == 5) &&                        (i[4] == 6) ))        {            sum = 20;        }        return sum;    }    public static int calculateFullHouse(ArrayList<Dice> myDice){        int sum = 0;        boolean fullHouse = false;        int [] i = new int[5];        i[0] = myDice.get(0).getValue();        i[1] = myDice.get(1).getValue();        i[2] = myDice.get(2).getValue();        i[3] = myDice.get(3).getValue();        i[4] = myDice.get(4).getValue();        Arrays.sort(i);        if(                ( (i[0] == i[1]) && (i[1] == i[2]) && (i[3] == i[4]) && (i[2] != i[3]) )||                        ( (i[0] == i[1]) && (i[2] == i[3]) && (i[3] == i[4]) && (i[1] != i[2]) )                ) {            fullHouse = true;        }        if(fullHouse){            for(int k=0;k<5;k++){                sum += myDice.get(k).getValue();            }        }        return sum;    }    public static int calculateChance(ArrayList<Dice> myDice){        int sum = 0;        for(int i=0;i<5;i++){            sum += myDice.get(i).getValue();        }        return sum;    }    public static int calculateYatzy(ArrayList<Dice> myDice){        int sum = 0;        for(int i=1;i<=6;i++){            int count=0;            for(int j=0;j<5;j++){                if(myDice.get(j).getValue() == i) {                    count ++;                }                if(count>4){                    sum = 50;                }            }        }        return sum;    }}